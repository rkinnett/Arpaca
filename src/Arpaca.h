#ifndef ALPACA_H
#define ALPACA_H

#include <string>
#include <ArduinoJson.h>
#include <WebServer.h>


#define ALPACA_API_VERSION 1
#define ALPACA_DEFAULT_PORT 8080
#define ALPACA_REQUEST_BUFFER_LEN 250
#define ALPACA_RESPONSE_BUFFER_LEN 250


typedef int ClientTransactionID;
typedef int ServerTransactionID;
typedef int ErrorID;


extern const ErrorID             ALPACA_NO_ERROR_ERROR_ID;
extern const char*               ALPACA_NO_ERROR_ERROR_DESC;
extern const ClientTransactionID ALPACA_NO_CLIENT_TRANSACTION_ID;
extern const ServerTransactionID ALPACA_NO_SERVER_TRANSACTION_ID;
extern const char*               ALPACA_EMPTY_RESPONSE_VALUE;

typedef enum AlpacaErrorIdx {
  ALPACA_ERROR_DESC_METHOD_NOT_IMPLEMENTED,
  ALPACA_ERROR_DESC_INVALID_VALUE,
  ALPACA_ERROR_DESC_VALUE_NOT_SET,
  ALPACA_ERROR_DESC_NOT_CONNECTED,
  ALPACA_ERROR_DESC_INVALID_WHILE_PARKED,
  ALPACA_ERROR_DESC_INVALID_WHILE_SLAVED,
  ALPACA_ERROR_DESC_INVALID_OPERATION,
  ALPACA_ERROR_DESC_ACTION_NOT_IMPLEMENTED
} AlpacaErrorIdx;

typedef struct {
  ErrorID errorID;
  char errorDesc[64];
} ErrorInfo;



typedef enum {
  ALPACA_SUCCESSFUL_TRANSACTION         = 0x0,
  ALPACA_ERROR_METHOD_NOT_IMPLEMENTED   = 0x400,
  ALPACA_ERROR_INVALID_VALUE            = 0x401,
  ALPACA_ERROR_VALUE_NOT_SET            = 0x402,
  ALPACA_ERROR_NOT_CONNECTED            = 0x407,
  ALPACA_ERROR_INVALID_WHILE_PARKED     = 0x408,
  ALPACA_ERROR_INVALID_WHILE_SLAVED     = 0x409,
  ALPACA_ERROR_INVALID_OPERATION        = 0x40B,
  ALPACA_ERROR_ACTION_NOT_IMPLEMENTED   = 0x40C,  
} AlpacaErrorID;

typedef struct {
  const char* strValue;
  ClientTransactionID clientTransactionID;
  ServerTransactionID serverTransactionID;
  ErrorID errorID;
  const char* errorDesc;
} AlpacaGetResponse;

typedef struct {
  ClientTransactionID clientTransactionID;
  ServerTransactionID serverTransactionID;
  ErrorID errorID;
  const char* errorDesc;
} AlpacaPutResponse;

void actionUndefined(void);


typedef enum AlpacaRequestParameterType {
  PARAM_TYPE_INT,
  PARAM_TYPE_BOOL,
  PARAM_TYPE_STR,
  PARAM_TYPE_,
  PARAM_TYPE_,
  PARAM_TYPE_,
} AlpacaRequestParameterType;

typedef struct AlpacaRequestParameter {
  AlpacaRequestParameterType type;
  const char* name[32];
} AlpacaRequestParameter;

typedef struct {
  HTTPMethod http_method_type;
  char name[32];
  void (*fcn)(void);
  AlpacaRequestParameter* parameter[
} AlpacaAction;


typedef enum AlpacaDeviceType {
  DEVICE_TYPE_CAMERA,
  DEVICE_TYPE_COVER_CALIBRATOR,
  DEVICE_TYPE_DOME,
  DEVICE_TYPE_FILTER_WHEEL,
  DEVICE_TYPE_FOCUSER,
  DEVICE_TYPE_OBSERVING_CONDITIONS,
  DEVICE_TYPE_ROTATOR,
  DEVICE_TYPE_SAFETY_MONITOR,
  DEVICE_TYPE_SWITCH,
  DEVICE_TYPE_TELESCOPE,
} AlpacaDeviceType;

typedef enum AlpacaCommonAction {
  ACTION_COMMON_PUT_ACTION,
  ACTION_COMMON_PUT_COMMAND_BLIND,
  ACTION_COMMON_PUT_COMMAND_BOOL,
  ACTION_COMMON_PUT_COMMAND_STRING,
  ACTION_COMMON_GET_CONNECTED,
  ACTION_COMMON_PUT_CONNECTED,
  ACTION_COMMON_GET_DESCRIPTION,
  ACTION_COMMON_GET_DRIVER_INFO,
  ACTION_COMMON_GET_DRIVER_VERSION,
  ACTION_COMMON_GET_INTERFACE_VERSION,
  ACTION_COMMON_GET_NAME,
  ACTION_COMMON_GET_SUPPORTED_ACTIONS,
} AlpacaCommonAction;

typedef enum AlpacaCameraAction {
  ACTION_CAMERA_GET_BAYER_OFFSET_X,
  ACTION_CAMERA_GET_BAYER_OFFSET_Y,
  ACTION_CAMERA_GET_BIN_X,
  ACTION_CAMERA_PUT_BIN_X,
  ACTION_CAMERA_GET_BIN_Y,
  ACTION_CAMERA_PUT_BIN_Y,
  ACTION_CAMERA_GET_CAMERA_STATE,
  ACTION_CAMERA_GET_CAMERA_X_SIZE,
  ACTION_CAMERA_GET_CAMERA_Y_SIZE,
  ACTION_CAMERA_GET_CAN_ABORT_EXPOSURE,
  ACTION_CAMERA_GET_CAN_ASYMMETRIC_BIN,
  ACTION_CAMERA_GET_CAN_FAST_READOUT,
  ACTION_CAMERA_GET_CAN_GET_COOLER_POWER,
  ACTION_CAMERA_GET_CAN_PULSE_GUIDE,
  ACTION_CAMERA_GET_CAN_SET_CCD_TEMPERATURE,
  ACTION_CAMERA_GET_CAN_STOP_EXPOSURE,
  ACTION_CAMERA_GET_CCD_TEMPERATURE,
  ACTION_CAMERA_GET_COOLER_ON,
  ACTION_CAMERA_PUT_COOLER_ON,
  ACTION_CAMERA_GET_COOLER_POWER,
  ACTION_CAMERA_GET_ELECTRONS_PER_ADU,
  ACTION_CAMERA_GET_EXPOSURE_MAX,
  ACTION_CAMERA_GET_EXPOSURE_MIN,
  ACTION_CAMERA_GET_EXPOSURE_RESOLUTION,
  ACTION_CAMERA_GET_FAST_READOUT,
  ACTION_CAMERA_PUT_FAST_READOUT,
  ACTION_CAMERA_GET_FULL_WELL_CAPACITY,
  ACTION_CAMERA_GET_GAIN,
  ACTION_CAMERA_PUT_GAIN,
  ACTION_CAMERA_GET_GAIN_MAX,
  ACTION_CAMERA_GET_GAIN_MIN,
  ACTION_CAMERA_GET_GAINS,
  ACTION_CAMERA_GET_HAS_SHUTTER,
  ACTION_CAMERA_GET_HEATSINK_TEMPERATURE,
  ACTION_CAMERA_GET_IMAGE_ARRAY,
  ACTION_CAMERA_GET_IMAGE_ARRAY_VARIANT,
  ACTION_CAMERA_GET_IMAGE_READY,
  ACTION_CAMERA_GET_ISPULSEGUIDING,
  ACTION_CAMERA_GET_LAST_EXPOSURE_DURATION,
  ACTION_CAMERA_GET_LAST_EXPOSURE_START_TIME,
  ACTION_CAMERA_GET_MAX_ADU,
  ACTION_CAMERA_GET_MAX_BIN_X,
  ACTION_CAMERA_GET_MAX_BIN_Y,
  ACTION_CAMERA_GET_NUM_X,
  ACTION_CAMERA_PUT_NUM_X,
  ACTION_CAMERA_GET_NUM_Y,
  ACTION_CAMERA_PUT_NUM_Y,
  ACTION_CAMERA_GET_OFFSET,
  ACTION_CAMERA_PUT_OFFSET,
  ACTION_CAMERA_GET_OFFSET_MAX,
  ACTION_CAMERA_GET_OFFSET_MIN,
  ACTION_CAMERA_GET_OFFSETS,
  ACTION_CAMERA_GET_PERCENT_COMPLETED,
  ACTION_CAMERA_GET_PIXEL_SIZE_X,
  ACTION_CAMERA_GET_PIXEL_SIZE_Y,
  ACTION_CAMERA_GET_READOUT_MODE,
  ACTION_CAMERA_PUT_READOUT_MODE,
  ACTION_CAMERA_GET_READOUT_MODES,
  ACTION_CAMERA_GET_SENSOR_NAME,
  ACTION_CAMERA_GET_SENSOR_TYPE,
  ACTION_CAMERA_GET_SET_CCD_TEMPERATURE,
  ACTION_CAMERA_PUT_SET_CCD_TEMPERATURE,
  ACTION_CAMERA_GET_START_X,
  ACTION_CAMERA_PUT_START_X,
  ACTION_CAMERA_GET_START_Y,
  ACTION_CAMERA_PUT_START_Y,
  ACTION_CAMERA_GET_SUBEXPOSURE_DURATION,
  ACTION_CAMERA_PUT_SUBEXPOSURE_DURATION,
  ACTION_CAMERA_PUT_ABORT_EXPOSURE,
  ACTION_CAMERA_PUT_PULSE_GUIDE,
  ACTION_CAMERA_PUT_START_EXPOSURE,
  ACTION_CAMERA_PUT_STOP_EXPOSURE,
} AlpacaCameraAction;

typedef enum AlpacaCoverCalibratorAction {
  ACTION_COVER_CALIBRATOR_GET_BRIGHTNESS,
  ACTION_COVER_CALIBRATOR_GET_CALIBRATOR_STATE,
  ACTION_COVER_CALIBRATOR_GET_COVER_STATE,
  ACTION_COVER_CALIBRATOR_GET_MAX_BRIGHTNESS,
  ACTION_COVER_CALIBRATOR_PUT_CALIBRATOR_OFF,
  ACTION_COVER_CALIBRATOR_PUT_CALIBRATOR_ON,
  ACTION_COVER_CALIBRATOR_PUT_CLOSE_COVER,
  ACTION_COVER_CALIBRATOR_PUT_HALT_COVER,
  ACTION_COVER_CALIBRATOR_PUT_OPEN_COVER
} AlpacaCoverCalibratorAction;

typedef enum AlpacaDomeAction {
  ACTION_DOME_GET_ALTITUDE,
  ACTION_DOME_GET_AT_HOME,
  ACTION_DOME_GET_AT_PARK,
  ACTION_DOME_GET_AZIMUTH,
  ACTION_DOME_GET_CAN_FIND_HOME,
  ACTION_DOME_GET_CAN_PARK,
  ACTION_DOME_GET_CAN_SET_ALTITUDE,
  ACTION_DOME_GET_CAN_SET_AZIMUTH,
  ACTION_DOME_GET_CAN_SET_PARK,
  ACTION_DOME_GET_CAN_SET_SHUTTER,
  ACTION_DOME_GET_CAN_SLAVE,
  ACTION_DOME_GET_CAN_SYNC_AZIMUTH,
  ACTION_DOME_GET_SHUTTER_STATUS,
  ACTION_DOME_GET_SLAVED,
  ACTION_DOME_PUT_SLAVED,
  ACTION_DOME_GET_SLEWING,
  ACTION_DOME_PUT_ABORT_SLEW,
  ACTION_DOME_PUT_CLOSE_SHUTTER,
  ACTION_DOME_PUT_FIND_HOME,
  ACTION_DOME_PUT_OPEN_SHUTTER,
  ACTION_DOME_PUT_PARK,
  ACTION_DOME_PUT_SET_PARK,
  ACTION_DOME_PUT_SLEW_TO_ALTITUDE,
  ACTION_DOME_PUT_SLEW_TO_AZIMUTH,
  ACTION_DOME_PUT_SYNC_TO_AZIMUTH,
} AlpacaDomeAction;

typedef enum AlpacaFilterWheelAction {
  ACTION_FILTER_WHEEL_GET_FOCUS_OFFSETS,
  ACTION_FILTER_WHEEL_GET_NAMES,
  ACTION_FILTER_WHEEL_GET_POSITION,
  ACTION_FILTER_WHEEL_PUT_POSITION  
} AlpacaFilterWheelAction;

typedef enum AlpacaFocuserAction {
  ACTION_FOCUSER_GET_ABSOLUTE,
  ACTION_FOCUSER_GET_IS_MOVING,
  ACTION_FOCUSER_GET_MAX_INCREMENT,
  ACTION_FOCUSER_GET_MAX_STEP,
  ACTION_FOCUSER_GET_POSITION,
  ACTION_FOCUSER_GET_STEP_SIZE,
  ACTION_FOCUSER_GET_TEMP_COMP,
  ACTION_FOCUSER_PUT_TEMP_COMP,
  ACTION_FOCUSER_GET_TEMP_COMP_AVAILABLE,
  ACTION_FOCUSER_GET_TEMPERATURE,
  ACTION_FOCUSER_PUT_HALT,
  ACTION_FOCUSER_PUT_MOVE,
} AlpacaFocuserAction;

typedef enum AlpacaObservingConditionsAction {
  ACTION_OBSERVING_CONDITIONS_GET_AVERAGE_PERIOD,
  ACTION_OBSERVING_CONDITIONS_PUT_AVERAGE_PERIOD,
  ACTION_OBSERVING_CONDITIONS_GET_CLOUD_COVER,
  ACTION_OBSERVING_CONDITIONS_GET_DEWPOINT,
  ACTION_OBSERVING_CONDITIONS_GET_HUMIDITY,
  ACTION_OBSERVING_CONDITIONS_GET_PRESSURE,
  ACTION_OBSERVING_CONDITIONS_GET_RAIN_RATE,
  ACTION_OBSERVING_CONDITIONS_GET_SKY_BRIGHTNESS,
  ACTION_OBSERVING_CONDITIONS_GET_SKY_QUALITY,
  ACTION_OBSERVING_CONDITIONS_GET_SKY_TEMPERATURE,
  ACTION_OBSERVING_CONDITIONS_GET_STAR_FWHM,
  ACTION_OBSERVING_CONDITIONS_GET_TEMPERATURE,
  ACTION_OBSERVING_CONDITIONS_GET_WIND_DIRECTION,
  ACTION_OBSERVING_CONDITIONS_GET_WIND_GUST,
  ACTION_OBSERVING_CONDITIONS_GET_WIND_SPEED,
  ACTION_OBSERVING_CONDITIONS_PUT_REFRESH,
  ACTION_OBSERVING_CONDITIONS_GET_SENSOR_DESCRIPTION,
  ACTION_OBSERVING_CONDITIONS_GET_TIME_SINCE_LAST_UPDATE,
} AlpacaObservingConditionsAction;

typedef enum AlpacaRotatorActions {
  ACTION_ROTATOR_GET_CAN_REVERSE,
  ACTION_ROTATOR_GET_IS_MOVING,
  ACTION_ROTATOR_GET_MECHANICAL_POSITION,
  ACTION_ROTATOR_GET_POSITION,
  ACTION_ROTATOR_GET_REVERSE,
  ACTION_ROTATOR_PUT_REVERSE,
  ACTION_ROTATOR_GET_STEP_SIZE,
  ACTION_ROTATOR_GET_TARGET_POSITION,
  ACTION_ROTATOR_PUT_HALT,
  ACTION_ROTATOR_PUT_MOVE,
  ACTION_ROTATOR_PUT_MOVE_ABSOLUTE,
  ACTION_ROTATOR_PUT_MOVE_MECHANICAL,
  ACTION_ROTATOR_PUT_SYNC,
} AlpacaRotatorActions;

typedef enum AlpacaSafetyMonitorAction {
  ACTION_SAFETY_MONITOR_GET_IS_SAFE,
} AlpacaSafetyMonitorAction;

typedef enum AlpacaSwitchAction {
  ACTION_SWITCH_GET_MAX_SWITCH,
  ACTION_SWITCH_GET_CAN_WRITE,
  ACTION_SWITCH_GET_GET_SWITCH,
  ACTION_SWITCH_GET_GET_SWITCH_DESCRIPTION,
  ACTION_SWITCH_GET_GET_SWITCH_NAME,
  ACTION_SWITCH_GET_GET_SWITCH_VALUE,
  ACTION_SWITCH_GET_MIN_SWITCH_VALUE,
  ACTION_SWITCH_GET_MAX_SWITCH_VALUE,
  ACTION_SWITCH_PUT_SET_SWITCH,
  ACTION_SWITCH_PUT_SET_SWITCH_NAME,
  ACTION_SWITCH_PUT_SET_SWITCH_VALUE,
  ACTION_SWITCH_GET_SWITCH_STEP,
} AlpacaSwitchAction;

typedef enum AlpacaTelescopeAction {
  ACTION_TELESCOPE_GET_ALIGNMENT_MODE,
  ACTION_TELESCOPE_GET_ALTITUDE,
  ACTION_TELESCOPE_GET_APERTURE_AREA,
  ACTION_TELESCOPE_GET_APERTURE_DIAMETER,
  ACTION_TELESCOPE_GET_AT_HOME,
  ACTION_TELESCOPE_GET_AT_PARK,
  ACTION_TELESCOPE_GET_AZIMUTH,
  ACTION_TELESCOPE_GET_CAN_FIND_HOME,
  ACTION_TELESCOPE_GET_CAN_PARK,
  ACTION_TELESCOPE_GET_CAN_PULSE_GUIDE,
  ACTION_TELESCOPE_GET_CAN_SET_DECLINATION_RATE,
  ACTION_TELESCOPE_GET_CAN_SET_GUIDE_RATES,
  ACTION_TELESCOPE_GET_CAN_SET_PARK,
  ACTION_TELESCOPE_GET_CAN_SET_PIER_SIDE,
  ACTION_TELESCOPE_GET_CAN_SET_RIGHT_ASCENSION_RATE,
  ACTION_TELESCOPE_GET_CAN_SET_TRACKING,
  ACTION_TELESCOPE_GET_CAN_SLEW,
  ACTION_TELESCOPE_GET_CAN_SLEW_ALT_AZ,
  ACTION_TELESCOPE_GET_CAN_SLEW_ALT_AZ_ASYNC,
  ACTION_TELESCOPE_GET_CAN_SLEW_ASYNC,
  ACTION_TELESCOPE_GET_CAN_SYNC,
  ACTION_TELESCOPE_GET_CAN_SYNC_ALT_AZ,
  ACTION_TELESCOPE_GET_CAN_UNPARK,
  ACTION_TELESCOPE_GET_DECLINATION,
  ACTION_TELESCOPE_GET_DECLINATION_RATE,
  ACTION_TELESCOPE_PUT_DECLINATION_RATE,
  ACTION_TELESCOPE_GET_DOES_REFRACTION,
  ACTION_TELESCOPE_PUT_DOES_REFRACTION,
  ACTION_TELESCOPE_GET_EQUATORIAL_SYSTEM,
  ACTION_TELESCOPE_GET_FOCAL_LENGTH,
  ACTION_TELESCOPE_GET_GUIDE_RATE_DECLINATION,
  ACTION_TELESCOPE_PUT_GUIDE_RATE_DECLINATION,
  ACTION_TELESCOPE_GET_GUIDE_RATE_RIGHT_ASCENSION,
  ACTION_TELESCOPE_PUT_GUIDE_RATE_RIGHT_ASCENSION,
  ACTION_TELESCOPE_GET_IS_PULSE_GUIDING,
  ACTION_TELESCOPE_GET_RIGHT_ASCENSION,
  ACTION_TELESCOPE_GET_RIGHT_ASCENSION_RATE,
  ACTION_TELESCOPE_PUT_RIGHT_ASCENSION_RATE,
  ACTION_TELESCOPE_GET_SIDE_OF_PIER,
  ACTION_TELESCOPE_PUT_SIDE_OF_PIER,
  ACTION_TELESCOPE_GET_SIDEREAL_TIME,
  ACTION_TELESCOPE_GET_SITE_ELEVATION,
  ACTION_TELESCOPE_PUT_SITE_ELEVATION,
  ACTION_TELESCOPE_GET_SITE_LATITUDE,
  ACTION_TELESCOPE_PUT_SITE_LATITUDE,
  ACTION_TELESCOPE_GET_SITE_LONGITUDE,
  ACTION_TELESCOPE_PUT_SITE_LONGITUDE,
  ACTION_TELESCOPE_GET_SLEWING,
  ACTION_TELESCOPE_GET_SLEW_SETTLE_TIME,
  ACTION_TELESCOPE_PUT_SLEW_SETTLE_TIME,
  ACTION_TELESCOPE_GET_TARGET_DECLINATION,
  ACTION_TELESCOPE_PUT_TARGET_DECLINATION,
  ACTION_TELESCOPE_GET_TARGET_RIGHT_ASCENSION,
  ACTION_TELESCOPE_PUT_TARGET_RIGHT_ASCENSION,
  ACTION_TELESCOPE_GET_TRACKING,
  ACTION_TELESCOPE_PUT_TRACKING,
  ACTION_TELESCOPE_GET_TRACKING_RATE,
  ACTION_TELESCOPE_PUT_TRACKING_RATE,
  ACTION_TELESCOPE_GET_TRACKING_RATES,
  ACTION_TELESCOPE_GET_UTC_DATE,
  ACTION_TELESCOPE_PUT_UTC_DATE,
  ACTION_TELESCOPE_PUT_ABORT_SLEW,
  ACTION_TELESCOPE_GET_AXIS_RATES,
  ACTION_TELESCOPE_GET_CAN_MOVE_AXIS,
  ACTION_TELESCOPE_GET_DESTINATION_SIDE_OF_PIER,
  ACTION_TELESCOPE_PUT_FIND_HOME,
  ACTION_TELESCOPE_PUT_MOVE_AXIS,
  ACTION_TELESCOPE_PUT_PARK,
  ACTION_TELESCOPE_PUT_PULSE_GUIDE,
  ACTION_TELESCOPE_PUT_SET_PARK,
  ACTION_TELESCOPE_PUT_SLEW_TO_ALT_AZ,
  ACTION_TELESCOPE_PUT_SLEW_TO_ALT_AZ_ASYNC,
  ACTION_TELESCOPE_PUT_SLEW_TO_COORDINATES,
  ACTION_TELESCOPE_PUT_SLEW_TO_COORDINATES_ASYNC,
  ACTION_TELESCOPE_PUT_SLEW_TO_TARGET,
  ACTION_TELESCOPE_PUT_SLEW_TO_TARGET_ASYNC,
  ACTION_TELESCOPE_PUT_SYNC_TO_ALT_AZ,
  ACTION_TELESCOPE_PUT_SYNC_TO_COORDINATES,
  ACTION_TELESCOPE_PUT_SYNC_TO_TARGET,
  ACTION_TELESCOPE_PUT_UNPARK,
} AlpacaTelescopeAction;









class AlpacaDevice {
  public: 
    AlpacaDevice(
      AlpacaDeviceType device_type, 
      int device_number = 0,
      char *dns_name = "arpaca"
    );
    virtual ~AlpacaDevice();
    
    void begin();
    void begin(int alpaca_port);

    bool connected          = false;
    char *dns_name          = "arpaca";
    String description      = "ESP32 Alpaca device";
    String driverinfo       = "Alpaca firmware";
    String driverversion    = "v0";    
    String interfaceversion = "v1";

	  int alpaca_port         = ALPACA_DEFAULT_PORT;
    
    AlpacaDeviceType device_type;
    int device_number  = 0;
    
    int serverTransactionCount = 0;
    int errorCount = 0;

    AlpacaAction *actions;
    AlpacaAction *other_actions;
        
    void setAction(AlpacaCommonAction                action_idx,  void (*fcn)(void));
    void setAction(AlpacaCameraAction                action_idx,  void (*fcn)(void));
    void setAction(AlpacaCoverCalibratorAction       action_idx,  void (*fcn)(void));
    void setAction(AlpacaDomeAction                  action_idx,  void (*fcn)(void));
    void setAction(AlpacaFilterWheelAction           action_idx,  void (*fcn)(void));
    void setAction(AlpacaFocuserAction               action_idx,  void (*fcn)(void));
    void setAction(AlpacaObservingConditionsAction   action_idx,  void (*fcn)(void));
    void setAction(AlpacaRotatorActions              action_idx,  void (*fcn)(void));
    void setAction(AlpacaSafetyMonitorAction         action_idx,  void (*fcn)(void));
    void setAction(AlpacaSwitchAction                action_idx,  void (*fcn)(void));
    void setAction(AlpacaTelescopeAction             action_idx,  void (*fcn)(void));

    void pageNotFound();

    // GET request general response:
    void sendGetResponse(AlpacaGetResponse);

    // GET request NOMINAL responses:
    void sendGetRequestNominalResponse(
      const char *strValue,
      ClientTransactionID clientTransactionID = ALPACA_NO_CLIENT_TRANSACTION_ID,
      ServerTransactionID serverTransactionID = ALPACA_NO_SERVER_TRANSACTION_ID
    );
    // GET request ERROR responses:
    void sendGetRequestErrorResponse(
      ErrorID,
      const char* errorDesc,
      const char* strValue = "",
      ClientTransactionID clientTransactionID = ALPACA_NO_CLIENT_TRANSACTION_ID,
      ServerTransactionID serverTransactionID = ALPACA_NO_SERVER_TRANSACTION_ID
    );
    // Special case to handle Alplaca-specific errors (error description to be provided by library):
    void sendGetRequestErrorResponse(
      AlpacaErrorIdx alpacaErrorIdx,
      const char* strValue = "",
      ClientTransactionID clientTransactionID = ALPACA_NO_CLIENT_TRANSACTION_ID,
      ServerTransactionID serverTransactionID = ALPACA_NO_SERVER_TRANSACTION_ID
    );
    
    
    int parseRequest();
    int fetchRequestParameter(const char* parameterName, char* parameterValue);
    
  private:
    char base_url[64];
    int num_actions = 0;
        
    StaticJsonDocument<ALPACA_REQUEST_BUFFER_LEN> requestParameters;
    
    char response_buffer[ALPACA_RESPONSE_BUFFER_LEN];
        
    WebServer *server;

    void setAction(int action_idx,  void (*fcn)(void));
    
    void RegisterServerons();
};




#endif /* ALPACA_H */

